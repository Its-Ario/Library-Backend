name: CI/CD

on:
    push:
        branches: [main]
    pull_request:
        branches: [main]

jobs:
    backend:
        runs-on: ubuntu-latest
        defaults:
            run:
                working-directory: ./backend
        steps:
            - uses: actions/checkout@v3

            - uses: actions/setup-node@v3
              with:
                  node-version: 20

            - name: Install pnpm
              run: npm install -g pnpm

            - name: Cache backend dependencies
              uses: actions/cache@v3
              with:
                  path: |
                      ~/.pnpm-store
                      node_modules
                  key: pnpm-backend-${{ hashFiles('**/pnpm-lock.yaml') }}
                  restore-keys: pnpm-backend-

            - name: Cache MongoDB binaries
              uses: actions/cache@v3
              with:
                  path: ~/.cache/mongodb-binaries
                  key: mongo-binaries-${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}
                  restore-keys: |
                      mongo-binaries-${{ runner.os }}-

            - name: Install dependencies
              run: pnpm install --frozen-lockfile

            - name: Run backend tests
              run: MONGOMS_DOWNLOAD_DIR=$HOME/.cache/mongodb-binaries pnpm exec npm test

            - name: Cache Docker layers (backend)
              uses: actions/cache@v3
              with:
                  path: /tmp/.buildx-cache-backend
                  key: ${{ runner.os }}-docker-backend-${{ github.sha }}
                  restore-keys: |
                      ${{ runner.os }}-docker-backend-

            - name: Build backend Docker image with cache
              uses: docker/setup-buildx-action@v2
            - run: |
                  docker buildx build \
                    -f backend/Dockerfile \
                    -t portlib-backend \
                    . \
                    --cache-from=type=local,src=/tmp/.buildx-cache-backend \
                    --cache-to=type=local,dest=/tmp/.buildx-cache-backend-new,mode=max

                  mv /tmp/.buildx-cache-backend-new /tmp/.buildx-cache-backend

    frontend:
        runs-on: ubuntu-latest
        defaults:
            run:
                working-directory: ./frontend
        steps:
            - uses: actions/checkout@v3

            - uses: actions/setup-node@v3
              with:
                  node-version: 20

            - name: Install pnpm
              run: npm install -g pnpm

            - name: Cache frontend dependencies
              uses: actions/cache@v3
              with:
                  path: |
                      ~/.pnpm-store
                      node_modules
                  key: pnpm-frontend-${{ hashFiles('**/pnpm-lock.yaml') }}
                  restore-keys: pnpm-frontend-

            - name: Install dependencies
              run: pnpm install --frozen-lockfile

            - name: Run frontend tests
              run: pnpm exec vitest run --environment=jsdom

            - name: Cache Docker layers (frontend)
              uses: actions/cache@v3
              with:
                  path: /tmp/.buildx-cache-frontend
                  key: ${{ runner.os }}-docker-frontend-${{ github.sha }}
                  restore-keys: |
                      ${{ runner.os }}-docker-frontend-

            - name: Build frontend Docker image with cache
              uses: docker/setup-buildx-action@v2
            - run: |
                  docker buildx build \
                    -f backend/Dockerfile \
                    -t portlib-backend \
                    . \
                    --cache-from=type=local,src=/tmp/.buildx-cache-backend \
                    --cache-to=type=local,dest=/tmp/.buildx-cache-backend-new,mode=max

                  mv /tmp/.buildx-cache-backend-new /tmp/.buildx-cache-backend

    deploy:
        runs-on: ubuntu-latest
        needs: [backend, frontend]
        steps:
            - uses: actions/checkout@v3

            - name: Add VPS to known hosts
              run: |
                  mkdir -p ~/.ssh
                  ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

            - name: Deploy to VPS
              uses: appleboy/ssh-action@v0.1.9
              with:
                  host: ${{ secrets.VPS_HOST }}
                  username: ${{ secrets.VPS_USER }}
                  key: ${{ secrets.VPS_SSH_KEY }}
                  script: |
                      cd ~/portlib
                      git fetch origin main
                      git reset --hard origin/main

                      echo "Pulling latest images if exist"
                      docker compose pull

                      echo "Building only changed images"
                      docker compose build --pull --parallel

                      echo "Deploy containers"
                      docker compose up -d --remove-orphans

                      echo "Prune unused Docker resources"
                      docker system prune -f
